import connectDB from '../config/database';
import { Respuesta } from '../models/Respuesta';
import { Encuesta } from '../models/Encuesta';
import { Usuario } from '../models/Usuario';

const verifyRespuestas = async (): Promise<void> => {
  try {
    console.log('üîç Verificando respuestas en la base de datos...\n');

    // Conectar a la base de datos
    await connectDB();

    // Contar total de respuestas
    const totalRespuestas = await Respuesta.countDocuments();
    console.log(`üìä Total de respuestas en la base de datos: ${totalRespuestas}\n`);

    if (totalRespuestas === 0) {
      console.log('‚ö†Ô∏è No se encontraron respuestas. Ejecuta el seed de respuestas primero.');
      return;
    }

    // Obtener estad√≠sticas por encuesta
    console.log('üìà Estad√≠sticas por encuesta:');
    console.log('=' .repeat(50));
    
    const encuestas = await Encuesta.find({});
    
    for (const encuesta of encuestas) {
      const numRespuestas = await Respuesta.countDocuments({ idEncuesta: encuesta._id });
      console.log(`\nüî∏ ${encuesta.nombreEncuesta}`);
      console.log(`   üìä Respuestas: ${numRespuestas}`);
      console.log(`   üìã Estado: ${encuesta.estado}`);
      console.log(`   ‚ùì Preguntas: ${encuesta.preguntas.length}`);
      
      if (numRespuestas > 0) {
        // Mostrar algunas respuestas de ejemplo
        const respuestasEjemplo = await Respuesta.find({ idEncuesta: encuesta._id })
          .populate('idUsuario', 'nombre username')
          .limit(2);
          
        console.log('   üë§ Usuarios que respondieron (ejemplo):');
        respuestasEjemplo.forEach((respuesta: any) => {
          console.log(`      - ${respuesta.idUsuario.nombre} (${respuesta.idUsuario.username})`);
        });
      }
    }

    // Obtener estad√≠sticas por usuario
    console.log('\n\nüë• Estad√≠sticas por usuario:');
    console.log('=' .repeat(50));
    
    const usuarios = await Usuario.find({});
    
    for (const usuario of usuarios) {
      const numRespuestas = await Respuesta.countDocuments({ idUsuario: usuario._id });
      if (numRespuestas > 0) {
        console.log(`üî∏ ${usuario.nombre} (${usuario.username}): ${numRespuestas} respuestas`);
      }
    }

    // Mostrar ejemplo detallado de una respuesta
    console.log('\n\nüìù Ejemplo detallado de respuesta:');
    console.log('=' .repeat(50));
    
    const respuestaEjemplo = await Respuesta.findOne()
      .populate('idUsuario', 'nombre username')
      .populate('idEncuesta', 'nombreEncuesta');
    
    if (respuestaEjemplo) {
      console.log(`\nüë§ Usuario: ${(respuestaEjemplo as any).idUsuario.nombre}`);
      console.log(`üìã Encuesta: ${(respuestaEjemplo as any).idEncuesta.nombreEncuesta}`);
      console.log(`üìÖ Fecha: ${(respuestaEjemplo as any).creadaEn?.toLocaleString('es-ES') || 'No disponible'}`);
      console.log(`üìä N√∫mero de respuestas: ${respuestaEjemplo.respuestasItem.length}`);
      
      // Obtener la encuesta completa para mostrar preguntas con respuestas
      const encuestaCompleta = await Encuesta.findById(respuestaEjemplo.idEncuesta);
      
      if (encuestaCompleta) {
        console.log('\nüîç Detalle de respuestas:');
        respuestaEjemplo.respuestasItem.forEach((item: any) => {
          const pregunta = encuestaCompleta.preguntas.id(item.idPregunta);
          if (pregunta) {
            console.log(`\n   ‚ùì Pregunta: ${pregunta.contenido}`);
            console.log(`   üìã Tipo: ${pregunta.tipoPregunta}`);
            console.log(`   ‚úÖ Respuesta: ${JSON.stringify(item.respuesta, null, 2)}`);
          }
        });
      }
    }

    console.log('\n‚úÖ Verificaci√≥n completada');

  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
  } finally {
    // Cerrar la conexi√≥n
    process.exit(0);
  }
};

// Ejecutar la verificaci√≥n si el archivo se ejecuta directamente
if (require.main === module) {
  verifyRespuestas();
}

export default verifyRespuestas;